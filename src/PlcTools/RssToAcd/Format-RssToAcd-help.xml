<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Format-RssToAcd</command:name>
      <command:verb>Format</command:verb>
      <command:noun>RssToAcd</command:noun>
      <maml:description>
        <maml:para>Converts RSS (Rockwell Software) format files to ACD (Allen-Bradley ControlLogix project) format using customizable regular expression mappings.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The Format-RssToAcd module provides a function to automate the conversion of files from the RSS format to the ACD format, commonly used in PLC migration or integration scenarios. The function reads a set of regular expression patterns and replacements from a JSON file (`RegexMap.json`) and applies them to the target file(s). Optional backup creation is supported before making changes. This tool is useful for engineers and developers working with industrial automation projects who need to modernize or migrate legacy PLC programs.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; The `RegexMap.json` file must be present in the same directory as the module, unless a custom path is specified with `-RegexMapPath`. Each entry in the JSON must contain both `Pattern` and `Replacement` properties.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Format-RssToAcd</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>The full path to the file to be modified, or to a directory containing files to process.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Ex">
          <maml:name>Extension</maml:name>
          <maml:description>
            <maml:para>The file extension filter to use when searching for files in a directory. Default is `*.xml`. Ignored if `-Path` is a file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>*.xml</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="B">
          <maml:name>Backup</maml:name>
          <maml:description>
            <maml:para>Creates a backup of the original file with a .bak extension before making any changes.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="R, RegexMap">
          <maml:name>RegexMapPath</maml:name>
          <maml:description>
            <maml:para>(Optional) The full path to a custom RegexMap.json file. If not specified, uses the default in the module directory.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Q">
          <maml:name>Quiet</maml:name>
          <maml:description>
            <maml:para>Suppresses output to the host. Only returns the result object.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>Determines how PowerShell responds to progress updates generated by a script, cmdlet, or provider, such as the progress bars generated by the Write-Progress cmdlet. The Write-Progress cmdlet creates progress bars that show a command's status. The ProgressAction parameter was added in PowerShell 7.4.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>The full path to the file to be modified, or to a directory containing files to process.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Ex">
        <maml:name>Extension</maml:name>
        <maml:description>
          <maml:para>The file extension filter to use when searching for files in a directory. Default is `*.xml`. Ignored if `-Path` is a file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>*.xml</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="B">
        <maml:name>Backup</maml:name>
        <maml:description>
          <maml:para>Creates a backup of the original file with a .bak extension before making any changes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="R, RegexMap">
        <maml:name>RegexMapPath</maml:name>
        <maml:description>
          <maml:para>(Optional) The full path to a custom RegexMap.json file. If not specified, uses the default in the module directory.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Q">
        <maml:name>Quiet</maml:name>
        <maml:description>
          <maml:para>Suppresses output to the host. Only returns the result object.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>Determines how PowerShell responds to progress updates generated by a script, cmdlet, or provider, such as the progress bars generated by the Write-Progress cmdlet. The Write-Progress cmdlet creates progress bars that show a command's status. The ProgressAction parameter was added in PowerShell 7.4.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Object[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>Returns an array of objects with details about each file processed, including file path, whether it was changed, which regex patterns were applied, and any error message if processing failed.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles.xml"</dev:code>
        <dev:remarks>
          <maml:para>This example formats the file `PlcFiles.xml`, changes the format variable from .rss to .acd, uses the RegexMap.json with the base configuration, and does not create a backup. This function will convert formats like "{::[LinkName]B3:0/0}" to "{::[LinkName]B3[0].0}".</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- Example 2 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles.xml" -Backup</dev:code>
        <dev:remarks>
          <maml:para>This example formats the file `PlcFiles.xml`, changes the format variable from .rss to .acd, uses the RegexMap.json with the base configuration, and creates a backup. This function will convert formats like "{::[LinkName]B3:0/0}" to "{::[LinkName]B3[0].0}".</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- Example 3 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles" -Extension "*.xml"</dev:code>
        <dev:remarks>
          <maml:para>This example processes all `.xml` files in the `C:\Temp\PlcFiles` directory, applies the regex replacements defined in RegexMap.json, and does not create backups. This is useful when you need to convert multiple files with a specific extension other than `.xml`.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- Example 4 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles" -Extension "*.txt"</dev:code>
        <dev:remarks>
          <maml:para>This example processes all `.txt` files in the `C:\Temp\PlcFiles` directory, applies the regex replacements defined in RegexMap.json, and does not create backups. This is useful when you need to convert multiple files with a specific extension other than `.xml`.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- Example 5 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles" -Extension "*.csv" -Backup</dev:code>
        <dev:remarks>
          <maml:para>This example processes all `.csv` files in the `C:\Temp\PlcFiles` directory, creates a backup for each file, and applies the regex replacements defined in RegexMap.json.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- Example 6 --------------------------</maml:title>
        <dev:code>PS C:\&gt; Format-RssToAcd -Path "C:\Temp\PlcFiles" -RegexMapPath "C:\Custom\RegexMap.json" -Quiet</dev:code>
        <dev:remarks>
          <maml:para>This example processes all `.xml` files in the `C:\Temp\PlcFiles` directory using a custom regex map file and suppresses output to the host, returning only the result object.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
</helpItems>