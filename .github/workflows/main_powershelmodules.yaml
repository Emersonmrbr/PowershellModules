name: Test and Publish PowerShell Module

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-publish-to-gallery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test all Module Manifests
        shell: pwsh
        run: |
          $modules = Get-ChildItem -Path .\src -Include *.psd1 -Recurse
          write-output "Found $($modules.Count) module manifests to verify."
          foreach ($module in $modules) {
              Write-Output "Testing module: $($module.FullName)"
              Test-ModuleManifest -Path $module.FullName -ErrorAction Stop
          }

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path .\src\**\*.psm1 -Setting ".\src\ScriptAnalyzerProfile.txt" -Recurse -OutVariable issues
          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})
          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

      - name: Verify Module Version, Build and publish (dry-run)
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        id: verifify
        shell: pwsh
        run: |
          $modules = Get-ChildItem -Path .\src -Include *.psd1 -Recurse
          write-output "Found $($modules.Count) module manifests to verify."
          foreach ($module in $modules) {
          write-output "Verifying module: $($module.FullName)"
            $manifest = Import-PowerShellDataFile -Path $module.FullName
            $moduleName = $manifest.ModuleRoot -split('.psd1') 
            write-output "Module Name: $($manifest.ModuleRoot)"
            $uri = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='$$moduleName'" 
            $response = Invoke-RestMethod -Uri $uri -Method Get
            write-output "Checking module: $($manifest.RootModule) version $($manifest.ModuleVersion)"
            foreach ($items in $response.properties) {
              foreach ($item in $items) {
                write-output "Testing module: $($item.id) version $($item.version)"
              }
            }
              if ($response.properties.version -eq $manifest.ModuleVersion) {
                Write-Output "Module $($manifest.ModuleRoot) version $($manifest.ModuleVersion) already exists in the gallery."
                } else {
                  Write-Output "Module $($manifest.ModuleRoot) version $($manifest.ModuleVersion) is new or updated."
                  Publish-Module -Path $module.DirectoryName -NuGetApiKey $env:NUGET_KEY -WhatIf -Verbose
              }
          }
