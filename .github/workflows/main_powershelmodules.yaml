name: Test and Publish PowerShell Modules

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test all module manifests
        shell: pwsh
        run: |
          $manifests = Get-ChildItem -Path ./src -Include *.psd1 -Recurse
          Write-Output "Found $($manifests.Count) manifest files to test."
          foreach ($m in $manifests) {
            Write-Output "Testing: $($m.FullName)"
            Test-ModuleManifest -Path $m.FullName -ErrorAction Stop
          }

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Analyze code with ScriptAnalyzer
        shell: pwsh
        run: |
          $issues = Invoke-ScriptAnalyzer -Path ./src/**/*.psm1 -Setting ./src/ScriptAnalyzerProfile.txt -Recurse
          $errors = $issues | Where-Object Severity -eq 'Error'
          $warnings = $issues | Where-Object Severity -eq 'Warning'

          if ($errors) {
            Write-Error "Found $($errors.Count) errors and $($warnings.Count) warnings."
            exit 1
          } else {
            Write-Output "No errors found. $($warnings.Count) warnings."
          }

      - name: Check version and publish modules (dynamic)
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          $manifests = Get-ChildItem -Path ./src -Include *.psd1 -Recurse

          foreach ($manifestFile in $manifests) {
            try {
              Write-Output "Checking module: $($manifestFile.FullName)"

              $manifest = Import-PowerShellDataFile -Path $manifestFile.FullName
              $moduleName = $manifest.RootModule -replace '\.psm1$', ''
              $moduleVersion = $manifest.ModuleVersion
              $modulePath = $manifestFile.DirectoryName

              Write-Output "Module: $moduleName | Version: $moduleVersion"

              $url = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='$moduleName'"
              $response = Invoke-RestMethod -Uri $url -ErrorAction Stop
              $response2 = Find-Module -Name $moduleName -ErrorAction Stop
              write-output "Response: $($response2 | Out-String)"

              $existingVersions = $response.properties.version

              if ($existingVersions -contains $moduleVersion) {
                Write-Output "Module $moduleName v$moduleVersion is already published. Skipping..."
                continue
              }

              Write-Output "Publishing $moduleName v$moduleVersion..."
              Publish-Module -Path $modulePath -NuGetApiKey $env:NUGET_KEY -Verbose -WhatIf

            } catch {
              Write-Error "Error processing module $($manifestFile.FullName): $_"
              continue
            }
          }
